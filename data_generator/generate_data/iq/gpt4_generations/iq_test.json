[
  {
    "id": "0000",
    "pattern": "a certain number of circles inside the polygon, the number of polygon sides increases by 1, the number of circles decreases by 1\n",
    "sequence": "green filled hexagon with 5 white filled circles inside, green filled heptagon with 4 white filled circles inside, (figure to be filled)\n",
    "options": "A: green filled octagon with 4 white filled circles inside, B: green filled octagon with 3 white filled circles inside, C: green filled pentagon with 2 white filled circles inside, D: green filled pentagon with 3 white filled circles inside\n",
    "answer": "B",
    "code": "import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport numpy as np\n\ndef draw_polygon_with_circles_modified(ax, sides, circles, color='green', circle_color='white'):\n    \"\"\"\n    Draw a polygon with a given number of sides and circles inside it,\n    with the circles moved slightly towards the center.\n    \"\"\"\n    # Coordinates for a regular polygon centered at (0, 0)\n    polygon_coords = [(np.cos(i * 2 * np.pi / sides), np.sin(i * 2 * np.pi / sides)) for i in range(sides)]\n\n    # Create and add the polygon\n    polygon = patches.Polygon(polygon_coords, closed=True, color=color)\n    ax.add_patch(polygon)\n\n    # Calculate positions for circles\n    radius = 0.1  # fixed radius for all circles\n    offset = 0.3  # offset towards the center\n    circle_coords = [(offset * np.cos(2 * np.pi / circles * i), offset * np.sin(2 * np.pi / circles * i)) for i in range(circles)]\n\n    # Add circles\n    for (x, y) in circle_coords:\n        circle = patches.Circle((x, y), radius, color=circle_color)\n        ax.add_patch(circle)\n\n    # Set limits and aspect\n    ax.set_xlim(-1, 1)\n    ax.set_ylim(-1, 1)\n    ax.set_aspect('equal', adjustable='box')\n    ax.axis('off')\n\ndef draw_iq_test_question():\n    \"\"\"\n    Draw a modified IQ test question with circles moved slightly towards the center\n    and without displaying axes for the question mark placeholder.\n    \"\"\"\n    fig, axs = plt.subplots(2, 4, figsize=(15, 6))\n\n    # Draw the sequence\n    draw_polygon_with_circles_modified(axs[0, 0], sides=6, circles=5)  # Hexagon with 5 circles\n    draw_polygon_with_circles_modified(axs[0, 1], sides=7, circles=4)  # Heptagon with 4 circles\n    axs[0, 2].text(0.5, 0.5, '?', fontsize=30, ha='center', va='center')  # Placeholder for the missing figure\n    axs[0, 2].axis('off')  # Hide axes for the question mark\n    axs[0, 3].axis('off')  # Extra subplot (not used)\n\n    # Draw the options\n    draw_polygon_with_circles_modified(axs[1, 0], sides=8, circles=4, color='green')  # Option A\n    axs[1, 0].set_title('A', pad=-20)\n    draw_polygon_with_circles_modified(axs[1, 1], sides=8, circles=3, color='green')  # Option B\n    axs[1, 1].set_title('B', pad=-20)\n    draw_polygon_with_circles_modified(axs[1, 2], sides=5, circles=2, color='green')  # Option C\n    axs[1, 2].set_title('C', pad=-20)\n    draw_polygon_with_circles_modified(axs[1, 3], sides=5, circles=3, color='green')  # Option D\n    axs[1, 3].set_title('D', pad=-20)\n\n    plt.savefig('./gpt4_generations/plots/xxx.png', dpi=80, bbox_inches='tight')\n\n# Call the function to draw the IQ test question\ndraw_iq_test_question()"
  },
  {
    "id": "0001",
    "pattern": "In a nine-panel grid, the number of filled rows increases sequentially as the sequence progresses.",
    "sequence": "First figure: the first row of the first grid is filled. Second figure: the first two rows of the first and second squares are filled. Third figure: to be determined.\n",
    "options": "A: All three rows of the three grids are filled.\nB: Only the first two rows of the first and second columns are filled.\nC: No rows are filled.\nD: The first two rows of the second and third grids are filled.",
    "answer": "A",
    "code": "import matplotlib.pyplot as plt\n\ndef draw_nine_box_grid_revised(ax, fill_pattern):\n    \"\"\"\n    Draw a nine-box grid with a specific fill pattern.\n    \"\"\"\n    for i in range(3):\n        for j in range(3):\n            rect = plt.Rectangle((j, 2 - i), 1, 1, edgecolor='black', facecolor='none')\n            ax.add_patch(rect)\n            if fill_pattern[i][j]:\n                rect.set_facecolor('yellow')\n\n    ax.set_xlim(0, 3)\n    ax.set_ylim(0, 3)\n    ax.set_aspect('equal', adjustable='box')\n    ax.axis('off')\n\ndef draw_iq_test_question_complete():\n    \"\"\"\n    Draw the complete IQ test question with revised options.\n    \"\"\"\n    fig, axs = plt.subplots(2, 4, figsize=(15, 6))\n\n    # Fill patterns for the sequence and options\n    sequence_fill_patterns = [\n        [[True, False, False], [False, False, False], [False, False, False]],  # First row filled\n        [[True, False, False], [True, False, False], [False, False, False]]   # First two rows filled\n    ]\n\n    option_fill_patterns = [\n        [[True, True, True], [True, True, True], [True, True, True]],   # Option A: All rows filled\n        [[True, True, False], [True, True, False], [False, False, False]],  # Option B: First two rows in first two squares\n        [[False, False, False], [False, False, False], [False, False, False]], # Option C: No rows filled\n        [[False, False, False], [True, True, False], [True, True, False]]  # Option D: First two rows in second and third squares\n    ]\n\n    # Draw the sequence\n    for i, pattern in enumerate(sequence_fill_patterns):\n        draw_nine_box_grid_revised(axs[0, i], pattern)\n    axs[0, 2].text(0.5, 0.5, '?', fontsize=30, ha='center', va='center')  # Placeholder for the missing figure\n    axs[0, 2].axis('off')  # Hide axes for the question mark\n    axs[0, 3].axis('off')  # Extra subplot (not used)\n\n    # Draw the options\n    for i, pattern in enumerate(option_fill_patterns):\n        draw_nine_box_grid_revised(axs[1, i], pattern)\n        axs[1, i].set_title(chr(65 + i), pad=-20)  # Label options A, B, C, D\n\n    plt.savefig('./gpt4_generations/plots/xxx.png', dpi=80, bbox_inches='tight')\n\n# Call the function to draw the complete IQ test question\ndraw_iq_test_question_complete()"
  },
  {
    "id": "0002",
    "pattern": "In each step of the sequence, a regular polygon with an increasing number of sides (starting from a triangle) is displayed. Inside each polygon, there are a number of shaded triangles equal to the number of sides of the polygon.\n",
    "sequence": "First figure: A triangle with 3 shaded triangles inside.\nSecond figure: A square with 4 shaded triangles inside.\nThird figure: A pentagon with 5 shaded triangles inside.\nFigure to be determined.",
    "options": "A: A hexagon with 6 shaded triangles inside.\nB: A hexagon with 6 shaded triangles inside, one of which is a different color.\nC: A hexagon with 7 shaded triangles inside.\nD: A pentagon with 5 shaded triangles inside.",
    "answer": "A",
    "code": "import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport numpy as np\n\ndef draw_polygon_with_triangles(ax, sides, triangle_count=None, special_triangle=-1):\n    \"\"\"\n    Draws a polygon with a specified number of sides and shaded triangles inside.\n    'triangle_count' determines the number of triangles. If None, it equals the number of sides.\n    'special_triangle' marks one triangle with a different color if specified.\n    \"\"\"\n    if triangle_count is None:\n        triangle_count = sides\n\n    # Coordinates for the polygon\n    polygon_coords = [(np.cos(i * 2 * np.pi / sides), np.sin(i * 2 * np.pi / sides)) for i in range(sides)]\n\n    # Creating and adding the polygon\n    polygon = patches.Polygon(polygon_coords, closed=True, color='gray', alpha=0.3)\n    ax.add_patch(polygon)\n\n    # Adding shaded triangles inside the polygon\n    for i in range(triangle_count):\n        angle = i * 2 * np.pi / triangle_count\n        triangle_coords = [\n            (0, 0),\n            (np.cos(angle), np.sin(angle)),\n            (np.cos(angle + 2 * np.pi / triangle_count), np.sin(angle + 2 * np.pi / triangle_count))\n        ]\n        color = 'black' if i != special_triangle else 'blue'\n        triangle = patches.Polygon(triangle_coords, closed=True, color=color, alpha=0.5)\n        ax.add_patch(triangle)\n\n    # Setting limits and aspect ratio\n    ax.set_xlim(-1.2, 1.2)\n    ax.set_ylim(-1.2, 1.2)\n    ax.set_aspect('equal', adjustable='box')\n    ax.axis('off')\n\ndef draw_iq_test_question():\n    \"\"\"\n    Draws the IQ test question with polygons and shaded triangles.\n    \"\"\"\n    fig, axs = plt.subplots(2, 4, figsize=(15, 6))\n\n    # Drawing the sequence\n    for i in range(3):\n        draw_polygon_with_triangles(axs[0, i], sides=i+3)\n    axs[0, 3].text(0.5, 0.5, '?', fontsize=30, ha='center', va='center')  # Placeholder\n    axs[0, 3].axis('off')\n\n    # Drawing the options\n    draw_polygon_with_triangles(axs[1, 0], sides=6)  # Option A\n    axs[1, 0].set_title('A', pad=-20)\n    draw_polygon_with_triangles(axs[1, 1], sides=6, special_triangle=0)  # Option B\n    axs[1, 1].set_title('B', pad=-20)\n    draw_polygon_with_triangles(axs[1, 2], sides=6, triangle_count=7)  # Option C\n    axs[1, 2].set_title('C', pad=-20)\n    draw_polygon_with_triangles(axs[1, 3], sides=5)  # Option D\n    axs[1, 3].set_title('D', pad=-20)\n\n    plt.savefig('./gpt4_generations/plots/xxx.png', dpi=80, bbox_inches='tight')\n\n# Calling the function to draw the IQ test question\ndraw_iq_test_question()"
  },
  {
    "id": "0003",
    "pattern": "An \u201cX\u201d shape with dots in certain quadrants, with a clockwise movement of dot positions in each subsequent grid.\n",
    "sequence": "1st grid - \u201cX\u201d with dots in the left and top quadrants, 2nd grid - \u201cX\u201d with dots in all quadrants, 3rd grid - \u201cX\u201d with dots in the top and right quadrants, 4th grid - \u201cX\u201d with dots in the left and bottom quadrants, 5th grid - \u201cX\u201d with dots in all quadrants, 6th grid - (figure to be filled).\n",
    "options": "A: \u201cX\u201d with dots in the left and bottom quadrants, B: \u201cX\u201d with dots in the left and right quadrants, C: \u201cX\u201d with dots in the right and bottom quadrants.\n",
    "answer": "C",
    "code": "import matplotlib.pyplot as plt\n\ndef draw_x_and_points_with_option(ax, points, question_mark=False, option_label=None):\n    # Set limits and aspect ratio\n    ax.set_xlim(-0.1, 1.1)\n    ax.set_ylim(-0.1, 1.1)\n    ax.set_aspect('equal', adjustable='box')\n\n    # Hide axis\n    ax.axis('off')\n\n    if question_mark:\n        # Draw question mark\n        ax.text(0.5, 0.5, '?', fontsize=30, ha='center', va='center')\n    else:\n        # Draw X\n        ax.plot([0, 1], [0, 1], color='black')\n        ax.plot([0, 1], [1, 0], color='black')\n\n        # Draw points\n        for point in points:\n            ax.plot(*point, 'o', color='black')\n\n    # Add option label if provided\n    if option_label:\n        ax.text(0.5, -0.2, option_label, fontsize=15, ha='center', va='center')\n\n# Define the points for the sequence and options\ngrid_points = [\n    [(0, 0.5), (0.5, 1)],  # Grid 1\n    [(0, 0.5), (0.5, 1), (1, 0.5), (0.5, 0)],  # Grid 2\n    [(1, 0.5), (0.5, 1)],  # Grid 3\n    [(0, 0.5), (0.5, 0)],  # Grid 4\n    [(0, 0.5), (0.5, 1), (1, 0.5), (0.5, 0)],  # Grid 5\n    []  # Grid 6 (Question mark)\n]\noptions_points = [\n    [(0, 0.5), (0.5, 0)],  # Option A\n    [(0, 0.5), (1, 0.5)],  # Option B\n    [(1, 0.5), (0.5, 0)],  # Option C (Correct)\n]\n\n# Drawing the sequence and options\nfig, axs = plt.subplots(3, 3, figsize=(9, 9))\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\n\n# Draw the sequence\nfor ax, points in zip(axs.flat[:5], grid_points):\n    draw_x_and_points_with_option(ax, points)\n\n# Draw the question mark\ndraw_x_and_points_with_option(axs[1, 2], [], question_mark=True)\n\n# Draw the options with labels\noption_labels = [\"A\", \"B\", \"C\"]\nfor ax, points, label in zip(axs.flat[6:], options_points, option_labels):\n    draw_x_and_points_with_option(ax, points, option_label=label)\n\nplt.savefig('./gpt4_generations/plots/xxx.png', dpi=80, bbox_inches='tight')"
  }
]